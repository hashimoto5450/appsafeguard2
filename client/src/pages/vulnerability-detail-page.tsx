import { useState } from "react";
import { useQuery } from "@tanstack/react-query";
import { useRoute, Link } from "wouter";
import { Vulnerability } from "@/types";
import { AppLayout } from "@/components/layout/app-layout";
import { Button } from "@/components/ui/button";
import { Card, CardContent, CardDescription, CardFooter, CardHeader, CardTitle } from "@/components/ui/card";
import { Badge } from "@/components/ui/badge";
import { 
  AlertTriangle, 
  ArrowLeft, 
  CheckCircle, 
  Clock, 
  FileText, 
  Loader2, 
  Shield, 
  ShieldAlert,
  Terminal,
  XCircle
} from "lucide-react";
import { Skeleton } from "@/components/ui/skeleton";
import { Tabs, TabsContent, TabsList, TabsTrigger } from "@/components/ui/tabs";
import { Alert, AlertDescription, AlertTitle } from "@/components/ui/alert";
import { Separator } from "@/components/ui/separator";

export default function VulnerabilityDetailPage() {
  const [, params] = useRoute<{ id: string }>("/vulnerabilities/:id");
  const vulnerabilityId = params?.id;

  // Fetch vulnerability data
  const { data: vulnerability, isLoading, error } = useQuery<Vulnerability>({
    queryKey: [`/api/vulnerabilities/${vulnerabilityId}`],
    enabled: !!vulnerabilityId,
  });

  // Format date
  const formatDate = (dateString?: string | null) => {
    if (!dateString) return "N/A";
    const date = new Date(dateString);
    return date.toLocaleString("ja-JP");
  };

  // Get severity badge
  const getSeverityBadge = (severity: string) => {
    switch (severity) {
      case "high":
        return <Badge variant="outline" className="bg-red-100 text-red-800 border-red-200">高</Badge>;
      case "medium":
        return <Badge variant="outline" className="bg-orange-100 text-orange-800 border-orange-200">中</Badge>;
      case "low":
        return <Badge variant="outline" className="bg-yellow-100 text-yellow-800 border-yellow-200">低</Badge>;
      case "safe":
        return <Badge variant="outline" className="bg-green-100 text-green-800 border-green-200">安全</Badge>;
      default:
        return <Badge variant="outline">{severity}</Badge>;
    }
  };

  // Get status badge
  const getStatusBadge = (status: string) => {
    switch (status) {
      case "pending":
        return <Badge variant="outline" className="flex items-center gap-1"><Clock className="h-3 w-3" /> 待機中</Badge>;
      case "in_progress":
        return <Badge variant="outline" className="flex items-center gap-1 text-blue-800 bg-blue-100 border-blue-200"><Loader2 className="h-3 w-3 animate-spin" /> 対応中</Badge>;
      case "fixed":
        return <Badge variant="outline" className="flex items-center gap-1 text-green-800 bg-green-100 border-green-200"><CheckCircle className="h-3 w-3" /> 修正済</Badge>;
      case "false_positive":
        return <Badge variant="outline" className="flex items-center gap-1 text-purple-800 bg-purple-100 border-purple-200"><XCircle className="h-3 w-3" /> 誤検知</Badge>;
      case "open":
        return <Badge variant="outline" className="flex items-center gap-1 text-red-800 bg-red-100 border-red-200"><AlertTriangle className="h-3 w-3" /> 未対応</Badge>;
      case "safe":
        return <Badge variant="outline" className="flex items-center gap-1 text-green-800 bg-green-100 border-green-200"><Shield className="h-3 w-3" /> 安全</Badge>;
      default:
        return <Badge variant="outline">{status}</Badge>;
    }
  };

  if (isLoading) {
    return (
      <AppLayout title="脆弱性詳細">
        <div className="flex-1 overflow-y-auto p-6">
          <div className="flex items-center gap-2 mb-6">
            <Link href="/vulnerabilities">
              <Button variant="outline" size="sm">
                <ArrowLeft className="h-4 w-4 mr-1" />
                戻る
              </Button>
            </Link>
            <Skeleton className="h-9 w-64" />
          </div>
          
          <div className="grid grid-cols-1 lg:grid-cols-3 gap-6 mb-6">
            <Skeleton className="h-48" />
            <Skeleton className="h-48" />
            <Skeleton className="h-48" />
          </div>
          
          <Skeleton className="h-[400px] w-full" />
        </div>
      </AppLayout>
    );
  }

  if (error || !vulnerability) {
    return (
      <AppLayout title="脆弱性詳細">
        <div className="flex-1 overflow-y-auto p-6">
          <div className="flex items-center gap-2 mb-6">
            <Link href="/scans">
              <Button variant="outline" size="sm">
                <ArrowLeft className="h-4 w-4 mr-1" />
                戻る
              </Button>
            </Link>
            <h1 className="text-2xl font-bold">脆弱性詳細</h1>
          </div>
          
          <Alert variant="destructive">
            <XCircle className="h-4 w-4" />
            <AlertTitle>脆弱性が見つかりません</AlertTitle>
            <AlertDescription>
              指定されたIDの脆弱性は存在しないか、アクセス権限がありません。
            </AlertDescription>
          </Alert>
        </div>
      </AppLayout>
    );
  }

  // 脆弱性タイプごとの対策方法を提供する関数
  const getRemediation = (vulnerability: Vulnerability) => {
    const remediation: { [key: string]: { title: string, description: string, solution: string } } = {
      // セキュリティヘッダー関連
      "Missing Content-Security-Policy Header": {
        title: "Content-Security-Policy ヘッダーが設定されていません",
        description: "Content-Security-Policy (CSP) はクロスサイトスクリプティング (XSS) やデータインジェクション攻撃などといったコード・インジェクション攻撃を防ぐのに役立ちます。",
        solution: "ウェブサーバー設定またはアプリケーションコードで適切なCSPヘッダーを設定してください。例: Content-Security-Policy: default-src 'self'"
      },
      "Missing X-Content-Type-Options Header": {
        title: "X-Content-Type-Options ヘッダーが設定されていません",
        description: "X-Content-Type-Options ヘッダーはMIMEタイプスニッフィングによる攻撃を防ぎます。これが設定されていないと、ブラウザがファイルのMIMEタイプを勝手に判断し、セキュリティリスクが生じる可能性があります。",
        solution: "ウェブサーバー設定またはアプリケーションコードでX-Content-Type-Options: nosniffヘッダーを設定してください。"
      },
      "Missing X-Frame-Options Header": {
        title: "X-Frame-Options ヘッダーが設定されていません",
        description: "X-Frame-Options ヘッダーはクリックジャッキング攻撃を防ぎます。このヘッダーが設定されていないと、悪意のあるサイトがあなたのサイトをiframeに表示し、ユーザーをだますことができてしまいます。",
        solution: "ウェブサーバー設定またはアプリケーションコードでX-Frame-Options: DENY または SAMEORIGIN ヘッダーを設定してください。"
      },
      "Missing Strict-Transport-Security Header": {
        title: "HTTP Strict Transport Security (HSTS) ヘッダーが設定されていません",
        description: "HSTSヘッダーはHTTPS通信の強制を指示します。このヘッダーが設定されていないと、中間者攻撃やプロトコルダウングレード攻撃のリスクが高まります。",
        solution: "ウェブサーバー設定またはアプリケーションコードでStrict-Transport-Security: max-age=31536000; includeSubDomains ヘッダーを設定してください。"
      },
      
      // Cookieセキュリティ関連
      "Insecure Cookie (Missing Secure Flag)": {
        title: "Cookieに Secure フラグが設定されていません",
        description: "Secure フラグがないと、Cookieが暗号化されていないHTTP接続で送信されてしまう可能性があり、盗聴攻撃に対して脆弱になります。",
        solution: "すべてのCookieにSecureフラグを設定して、HTTPSでのみ送信されるようにしてください。"
      },
      "Insecure Cookie (Missing HttpOnly Flag)": {
        title: "Cookieに HttpOnly フラグが設定されていません",
        description: "HttpOnly フラグがないと、JavaScriptからCookieにアクセスできてしまい、XSS攻撃に対して脆弱になります。",
        solution: "セッションCookieやその他の機密情報を含むCookieにHttpOnlyフラグを設定してください。"
      },
      "Insecure Cookie (Missing SameSite Attribute)": {
        title: "Cookieに SameSite 属性が設定されていません",
        description: "SameSite属性がないと、クロスサイトリクエストフォージェリ (CSRF) 攻撃に対して脆弱になります。",
        solution: "Cookieに適切なSameSite属性（Lax または Strict）を設定してください。"
      },
      
      // HTTPS関連
      "Insecure HTTP Protocol Used": {
        title: "安全でないHTTPプロトコルが使用されています",
        description: "HTTPプロトコルは通信が暗号化されないため、ユーザーデータが盗聴される可能性があります。",
        solution: "すべての通信にHTTPSを使用し、HTTPからのリクエストはHTTPSへリダイレクトするように設定してください。"
      },
      
      // XSS関連
      "Potential Reflected XSS": {
        title: "反射型XSS（クロスサイトスクリプティング）脆弱性の可能性",
        description: "ユーザー入力がフィルタリングされずにページに反映されると、攻撃者が悪意のあるスクリプトを実行できる可能性があります。",
        solution: "すべてのユーザー入力に対して適切なサニタイズ処理を行い、出力時にはHTMLエンコーディングを使用してください。またContent-Security-Policyの実装も検討してください。"
      },
      "Potential DOM-based XSS": {
        title: "DOM Based XSS脆弱性の可能性",
        description: "クライアントサイドのJavaScriptコードがURLハッシュやクエリパラメータなどのデータを安全に処理していない可能性があります。",
        solution: "document.write、innerHTML、outerHTMLなどのDOM操作には安全なAPIを使用し、ユーザー入力からの値をそのまま使わないようにしてください。また、テンプレートシステムや仮想DOMを備えたフレームワークの使用を検討してください。"
      },
      
      // CSRF関連
      "Potential CSRF Vulnerability": {
        title: "CSRF（クロスサイトリクエストフォージェリ）脆弱性の可能性",
        description: "フォームにCSRFトークンが設定されていないため、攻撃者が被害者の認証情報を使って操作を実行できる可能性があります。",
        solution: "すべてのPOSTリクエストを処理するフォームに一意のCSRFトークンを追加し、サーバー側でこれを検証してください。またSameSite Cookie属性の使用も検討してください。"
      },
      
      // SQLインジェクション関連
      "Potential SQL Injection": {
        title: "SQLインジェクション脆弱性の可能性",
        description: "ユーザー入力がSQL文に直接組み込まれると、攻撃者がデータベースに不正にアクセスする可能性があります。",
        solution: "パラメータ化クエリやプリペアドステートメントを使用し、ユーザー入力を直接SQLに組み込まないようにしてください。また、データベースの権限も最小限に設定すべきです。"
      },
      
      // ファイルアップロード関連
      "Insecure File Upload Configuration": {
        title: "安全でないファイルアップロード設定",
        description: "ファイルアップロード機能が適切に設定されていないため、悪意のあるファイルがアップロードされる可能性があります。",
        solution: "許可するファイル拡張子の制限、ファイルの内容の検証、アップロードされたファイルの実行を防ぐためのディレクトリ設定を行ってください。また、アップロードされたファイルの権限を適切に設定してください。"
      },
      
      // 情報漏洩関連
      "Server Information Disclosure": {
        title: "サーバー情報が公開されています",
        description: "レスポンスヘッダーにサーバーのバージョン情報が含まれており、攻撃者が特定のバージョンの脆弱性を悪用する可能性があります。",
        solution: "サーバー設定を変更して、ServerやX-Powered-Byなどのヘッダーを削除または一般化してください。詳細なバージョン情報を表示しないようにしましょう。"
      },
      "Technology Information Disclosure": {
        title: "使用技術情報が公開されています",
        description: "レスポンスヘッダーやHTML/JavaScript内に使用技術の詳細情報が含まれており、攻撃者が特定の技術の脆弱性を悪用する可能性があります。",
        solution: "X-Powered-Byヘッダーの削除、JavaScript/HTMLコメントのクリーンアップ、および使用しているフレームワークやライブラリのバージョン情報を非表示にしてください。"
      },
      "Comment Contains Sensitive Information": {
        title: "コメントに機密情報が含まれています",
        description: "HTMLソースコードのコメントに、開発者情報や内部のシステム情報などの機密情報が含まれています。",
        solution: "本番環境にデプロイする前に、すべてのHTMLコメントを確認し、機密情報を含むコメントを削除してください。また、自動化ツールを使用して本番環境のコードからすべてのコメントを削除することも検討してください。"
      },
      
      // CORS関連
      "Misconfigured CORS Policy": {
        title: "CORSポリシーの設定ミス",
        description: "Access-Control-Allow-Origin ヘッダーが不適切に設定されており、第三者のドメインからのアクセスが許可されてしまっています。",
        solution: "Access-Control-Allow-Origin ヘッダーを特定の信頼できるドメインのみに制限するか、同一オリジンポリシーを維持してください。ワイルドカード（*）の使用は避けるべきです。"
      },
      
      // TLS関連
      "Old TLS Version": {
        title: "古いTLSバージョンが使用されています",
        description: "TLS 1.0や1.1などの古いバージョンは既知の脆弱性があり、安全ではありません。",
        solution: "TLS 1.2以上のみをサポートするようにサーバーを設定してください。古いTLSバージョンのサポートを完全に無効にすることを検討してください。"
      },
      
      // その他
      "Robots.txt Reveals Sensitive Directories": {
        title: "robots.txtが機密ディレクトリを公開しています",
        description: "robots.txtファイルに管理画面やその他の機密ディレクトリへのパスが記載されています。",
        solution: "robots.txtファイルを確認し、機密性の高いディレクトリやファイルへの参照を削除してください。"
      },
      "Insecure Password Field": {
        title: "安全でないパスワードフィールド",
        description: "パスワードフィールドがautocomplete属性を無効にしていないか、または他のセキュリティベストプラクティスに従っていません。",
        solution: "パスワードフィールドにautocomplete='new-password'またはautocomplete='off'属性を追加し、ブラウザによる自動入力を防止することを検討してください。また、強力なパスワードポリシーを実装してください。"
      },
      "Console Error Logging": {
        title: "コンソールエラーが記録されています",
        description: "JavaScriptのコンソールエラーが検出され、デバッグ情報が公開されている可能性があります。",
        solution: "本番環境では詳細なエラーメッセージを表示しないように、エラーハンドリングを改善し、エラーログを適切に管理してください。"
      }
    };

    // デフォルトの対策情報
    const defaultRemediation = {
      title: "脆弱性への対応",
      description: "この脆弱性は特定の問題を示しています。セキュリティの専門家による詳細な評価をお勧めします。",
      solution: "この問題を修正するには、セキュリティのベストプラクティスに従い、脆弱性の特性に応じた対策を講じてください。"
    };

    // 脆弱性名に基づいて適切な対策を返す
    return remediation[vulnerability.name] || defaultRemediation;
  };

  const remediationInfo = getRemediation(vulnerability);

  return (
    <AppLayout title={`脆弱性詳細: ${vulnerability.name}`}>
      <div className="flex-1 overflow-y-auto p-6">
        <div className="flex flex-col md:flex-row justify-between items-start md:items-center gap-4 mb-6">
          <div className="flex items-center gap-2">
            <Link href={`/scans/${vulnerability.scanId}`}>
              <Button variant="outline" size="sm">
                <ArrowLeft className="h-4 w-4 mr-1" />
                スキャン詳細へ戻る
              </Button>
            </Link>
            <h1 className="text-2xl font-bold">脆弱性詳細</h1>
          </div>
        </div>
        
        {/* 脆弱性概要 */}
        <div className="grid grid-cols-1 lg:grid-cols-3 gap-6 mb-6">
          <Card>
            <CardHeader className="pb-2">
              <CardTitle className="text-sm font-medium text-muted-foreground">脆弱性名</CardTitle>
            </CardHeader>
            <CardContent>
              <div className="flex items-center gap-2">
                <ShieldAlert className={`h-5 w-5 ${
                  vulnerability.severity === 'high' ? 'text-red-500' :
                  vulnerability.severity === 'medium' ? 'text-orange-500' :
                  vulnerability.severity === 'low' ? 'text-yellow-500' :
                  'text-green-500'
                }`} />
                <div className="text-xl font-bold">
                  {vulnerability.name}
                </div>
              </div>
              <div className="mt-2">
                <div className="flex gap-2 mt-1">
                  <span className="text-sm text-muted-foreground">重要度:</span>
                  {getSeverityBadge(vulnerability.severity)}
                </div>
                <div className="flex gap-2 mt-1">
                  <span className="text-sm text-muted-foreground">カテゴリ:</span>
                  <Badge variant="outline">{vulnerability.category}</Badge>
                </div>
                <div className="flex gap-2 mt-1">
                  <span className="text-sm text-muted-foreground">ステータス:</span>
                  {getStatusBadge(vulnerability.status)}
                </div>
              </div>
            </CardContent>
          </Card>
          
          <Card>
            <CardHeader className="pb-2">
              <CardTitle className="text-sm font-medium text-muted-foreground">場所</CardTitle>
            </CardHeader>
            <CardContent>
              <div className="text-lg font-semibold mb-2 break-all">
                {vulnerability.url}
              </div>
              <div className="flex flex-col gap-1">
                <div className="text-sm text-muted-foreground">検出日: {formatDate(vulnerability.createdAt)}</div>
                <div className="text-sm text-muted-foreground">最終更新: {formatDate(vulnerability.updatedAt)}</div>
              </div>
            </CardContent>
          </Card>
          
          <Card>
            <CardHeader className="pb-2">
              <CardTitle className="text-sm font-medium text-muted-foreground">アクション</CardTitle>
            </CardHeader>
            <CardContent>
              <div className="flex flex-col gap-2">
                <Button variant="outline" disabled={vulnerability.status === 'fixed'}>
                  <CheckCircle className="h-4 w-4 mr-2" />
                  修正済みにする
                </Button>
                <Button variant="outline" disabled={vulnerability.status === 'false_positive'}>
                  <XCircle className="h-4 w-4 mr-2" />
                  誤検知として報告
                </Button>
                <Button variant="outline">
                  <FileText className="h-4 w-4 mr-2" />
                  タスクに追加
                </Button>
              </div>
            </CardContent>
          </Card>
        </div>
        
        {/* 脆弱性の詳細と対策 */}
        <Tabs defaultValue="description" className="mt-6">
          <TabsList>
            <TabsTrigger value="description">詳細説明</TabsTrigger>
            <TabsTrigger value="remediation">対策方法</TabsTrigger>
            <TabsTrigger value="technical">技術情報</TabsTrigger>
          </TabsList>
          
          <TabsContent value="description" className="mt-4">
            <Card>
              <CardHeader>
                <CardTitle>{remediationInfo.title}</CardTitle>
                <CardDescription>脆弱性の詳細と影響について</CardDescription>
              </CardHeader>
              <CardContent>
                <div className="prose max-w-none">
                  <p>{vulnerability.description}</p>
                  <h3 className="text-lg font-bold mt-4">リスク説明</h3>
                  <p>{remediationInfo.description}</p>
                </div>
              </CardContent>
            </Card>
          </TabsContent>
          
          <TabsContent value="remediation" className="mt-4">
            <Card>
              <CardHeader>
                <CardTitle>対策方法</CardTitle>
                <CardDescription>この脆弱性を修正するための推奨される手順</CardDescription>
              </CardHeader>
              <CardContent>
                <div className="prose max-w-none">
                  <div className="bg-green-50 border border-green-200 rounded-md p-4 mb-4">
                    <h3 className="text-lg font-bold text-green-800 flex items-center">
                      <CheckCircle className="h-5 w-5 mr-2" />
                      推奨対策
                    </h3>
                    <p className="text-green-800">{remediationInfo.solution}</p>
                  </div>
                  
                  <h3 className="text-lg font-bold mt-4">追加リソース</h3>
                  <ul>
                    <li>OWASP (Open Web Application Security Project) のガイドライン</li>
                    <li>セキュリティ関連のベストプラクティス</li>
                    <li>関連するセキュリティフレームワークのドキュメント</li>
                  </ul>
                </div>
              </CardContent>
            </Card>
          </TabsContent>
          
          <TabsContent value="technical" className="mt-4">
            <Card>
              <CardHeader>
                <CardTitle>技術情報</CardTitle>
                <CardDescription>詳細な技術データや実装に関する情報</CardDescription>
              </CardHeader>
              <CardContent>
                <div className="prose max-w-none">
                  <h3 className="text-lg font-bold">詳細情報</h3>
                  <pre className="bg-slate-950 text-slate-50 p-4 rounded-md overflow-x-auto">
                    <code>{JSON.stringify(vulnerability.details, null, 2)}</code>
                  </pre>
                </div>
              </CardContent>
            </Card>
          </TabsContent>
        </Tabs>
      </div>
    </AppLayout>
  );
}